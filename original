{
 "cells": [
  {
   "attachments": {
    "image.png": {
     "image/png": ""
    }
   },
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Hypothesis Testing JOLT\n",
    "\n",
    "George Lifchits Sep 2020\n",
    "\n",
    "This notebook draws heavily on material from _Wasserman - All of Statistics (2004)_ chapter 10.1 and 10.2.  \n",
    "Access to this chapter should be available to anyone with a UofT login at [this link](https://link-springer-com.myaccess.library.utoronto.ca/chapter/10.1007/978-0-387-21736-9_10)\n",
    "\n",
    "**This notebook has interactive features.**  Sections with `@interact` code blocks can be run with `ipywidgets`, which provides slider bars which let you play with parameters and see graphs change (see the example image below with sliders).  To interact with this notebook, run it on your computer with Jupyter/Python. Just download the .ipynb notebook [at this link](https://www.cs.toronto.edu/~glifchits/public/hyp%20testing%20JOLT%20-%20Wald%20test.ipynb)\n",
    "\n",
    "<img width=\"600px\" src=\"attachment:image.png\"></img>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Begin the JOLT here"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "from scipy import stats\n",
    "import matplotlib.pyplot as plt\n",
    "from ipywidgets import interact\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "np.random.seed(1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## The experiment\n",
    "\n",
    "Suppose we are providing math students with explanations for a particular problem. After the student reads the explanation they can rate it as either \"good\" or \"bad\". Of course, we want to provide students with the best explanations so we want to learn whether one explanation is better than another one.\n",
    "\n",
    "Let's call our two explanations $A$ and $B$, and suppose they have an underlying true probability of being rated \"good\" to be $p_A=0.6$ and $p_B=0.3$ â€“ but, we do not know this underlying true probability.\n",
    "\n",
    "We provided these explanations to students in an experiment:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "exp_A = stats.bernoulli.rvs(p=0.6, size=30)\n",
    "exp_B = stats.bernoulli.rvs(p=0.3, size=20)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "After the experiment, we collected these ratings from students. 1 is \"good\" and 0 is \"bad\".\n",
    "\n",
    "For the first explanation $A$ we got:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0,\n",
       "       1, 0, 0, 0, 1, 1, 1, 0])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "exp_A"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For the other explanation $B$ we got:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0])"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "exp_B"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## What does the experiment show?\n",
    "\n",
    "First lets compute the means of the experiment outcomes, and their standard errors."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "p_a = exp_A.mean()\n",
    "p_b = exp_B.mean()\n",
    "N_A = len(exp_A)\n",
    "N_B = len(exp_B)\n",
    "se_a = np.sqrt((p_a*(1-p_a))/N_A)\n",
    "se_b = np.sqrt((p_b*(1-p_b))/N_B)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now let's visualize the data.  We plot the mean outcomes as well as the standard error of the means, to illustrate uncertainty about the measurement."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.bar(x=0, height=p_a)\n",
    "plt.errorbar(x=0, y=p_a, yerr=se_a, color='black', capsize=5, linewidth=1)\n",
    "fd = {'fontweight':'bold', 'fontsize': 14, 'color': 'white'}\n",
    "plt.text(0, 0.15, f\"mean = {p_a:.2f}\\nN = {N_A}\", \n",
    "         horizontalalignment=\"center\", fontdict=fd)\n",
    "\n",
    "plt.bar(x=1, height=p_b)\n",
    "plt.errorbar(x=1, y=p_b, yerr=se_b, color='black', capsize=5, linewidth=1)\n",
    "plt.text(1, 0.10, f\"mean = {p_b:.2f}\\nN = {N_B}\", \n",
    "         horizontalalignment=\"center\", fontdict=fd)\n",
    "\n",
    "plt.xticks([0, 1], labels=['Explanation A', 'Explanation B'])\n",
    "plt.ylabel(\"Mean explanation success\");"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Visualizing the data, it seems as though explanation A is better than B.  The error bars which indicate standard error of the mean even seem to support this claim.\n",
    "\n",
    "_However_, these are random quantities.  If we collected more data, the graph might show a different result.\n",
    "\n",
    "How can we _prove_ whether one explanation is in fact better than the other?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Forming hypotheses\n",
    "\n",
    "Recall that we **don't know** $p_A$ and $p_B$: all we have is the data collected after our experiment.\n",
    "\n",
    "A simple question we can ask is: \"is one explanation better than the other?\" We can try to answer this with hypothesis testing.\n",
    "\n",
    "Similar to a legal trial where we say \"innocent until proven guilty,\" the null hypothesis always assumes \"innocence\" unless the evidence allows us to confidently **reject** the idea of innocence in favour of the alternative hypothesis.\n",
    "\n",
    "### Identify the hypotheses\n",
    "\n",
    "Our default assumption is the boring and uninteresting one which states that the two explanations are equally effective:\n",
    "$$\\text{default} : p_A = p_B$$\n",
    "\n",
    "Therefore, our alternative should encompass all other possibilities:\n",
    "$$\\text{alternative} : p_A \\neq p_B$$\n",
    "\n",
    "### Formalizing the null and alternative hypotheses\n",
    "\n",
    "These are good, but there are two parameters being looked at here (that is, the means of each explanation).  With hypothesis testing it is usually easier to test one single parameter at a time.  So we find a way to combine these two values into one.\n",
    "\n",
    "If $p_A = p_B$ then $p_A - p_B = 0$.  Call the difference $\\delta = p_A - p_B$.  Now $\\delta$ is a single value that we can test.  Great!\n",
    "\n",
    "Our null hypothesis ($H_0$) is therefore the test that there is _no difference in means_:\n",
    "$$H_0 : \\delta = 0$$\n",
    "\n",
    "Therefore, our alternative hypothesis ($H_1$) is the test that there **is** a difference in means:\n",
    "$$H_1 : \\delta \\neq 0$$\n",
    "\n",
    "### How do we answer the question with our evidence?\n",
    "\n",
    "If our null hypothesis $H_0$ were *correct*, then the answer to our question is that both explanations are the same, and so one is not better than the other. But if the alternative hypothesis $H_1$ was correct, then our answer would be that yes, one explanation *is* better than the other one.\n",
    "\n",
    "We should use the data that we collected as *evidence* that supports either $H_0$ or $H_1$.  To make use of this we must make some statistical assumptions.\n",
    "\n",
    "Suppose we had infinite data â€” if we think its reasonable that the test parameter is taken from a Normal (Gaussian; bell-curve) distribution, then we can make use of the **Wald test**.\n",
    "\n",
    "In our example, we are interested in the **difference in means** of the data, so this assumption is reasonable.  (See the appendix section [\"Assuming Normality\"](#Exploring-Bernoulli-distribution,-deriving-Binomial,-assuming-Normality) to understand why this is a fair assumption for our data.)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## The Wald Test\n",
    "\n",
    "In general, for any test parameter $\\theta$ which is asymptotically Normal, the Wald test is a valid hypothesis test we can perform.\n",
    "\n",
    "First compute the value $W = \\frac{\\hat{\\theta} - \\theta_0}{\\hat{se}}$. If $|W| > z_{\\alpha/2}$ then you can reject the null hypothesis!\n",
    "\n",
    "Let's run the computation for our example and see what this means.\n",
    "\n",
    "### Computing the test parameter\n",
    "\n",
    "Our test parameter is $\\hat{\\delta} = \\hat{p_A} - \\hat{p_B}$, which is the _sample difference in means_. \n",
    "\n",
    "> The ^ \"hats\" denotes a sample quantity (what we actually observed -- an \"estimate\" of the theoretical value). \n",
    "> No hat refers to a theoretical quantity (which will forever be unknown, since it requires infinite data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "^delta = 0.3167\n"
     ]
    }
   ],
   "source": [
    "delta = p_a - p_b\n",
    "print(f'^delta = {delta:.4f}')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Compute the sample standard error\n",
    "\n",
    "Now that we're dealing with a difference in means, it's not the same standard error calculation as before. This time, it is computed as follows:\n",
    "$$\\hat{se} = \\sqrt{ \\frac{\\hat{p_A}(1-\\hat{p_A})}{N_A} + \\frac{\\hat{p_B}(1-\\hat{p_B})}{N_B}}$$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "^se = 0.1370\n"
     ]
    }
   ],
   "source": [
    "se = np.sqrt((p_a*(1-p_a)) / N_A  +  (p_b*(1-p_b)) / N_B)\n",
    "print(f'^se = {se:.4f}')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Compute the test statistic\n",
    "\n",
    "This is the value of $W$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "W = 2.3106\n"
     ]
    }
   ],
   "source": [
    "W = (delta - 0) / se\n",
    "print(f\"W = {W:.4f}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Find the appropriate z-score\n",
    "\n",
    "Supposing our alpha = 0.05"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "z_alpha/2 = 1.96\n"
     ]
    }
   ],
   "source": [
    "alpha = 0.05\n",
    "norm = stats.norm(loc=0, scale=1)\n",
    "z = norm.ppf(1-(alpha/2))\n",
    "print(f'z_alpha/2 = {z:.2f}') # this is a good z-score to memorize!"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Run the hypothesis test!\n",
    "\n",
    "Can we reject the null hypothesis, and accept the alternative? Is one explanation better than the other?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "abs(W) > z"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## What is the Wald test doing?\n",
    "\n",
    "With the Wald test, we computed $W$ and then did a comparison. What does this all mean?\n",
    "\n",
    "Recall: $W = \\frac{\\hat{\\theta} - \\theta_0}{\\hat{se}}$. If $|W| > z_{\\alpha/2}$ then you can reject the null hypothesis!\n",
    "\n",
    "### How does the Wald statistic work?\n",
    "\n",
    "Ultimately, it relies on the difference in means and the standard error.  Let's look at a few examples of this.\n",
    "\n",
    "Suppose we had the A/B conditions, our means (m) were very similar, and we collected a large sample size for each condition (n)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "mA = 0.53\n",
    "mB = 0.52\n",
    "nA = 199\n",
    "nB = 202"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "^delta = 0.0100, ^se = 0.0499\n"
     ]
    }
   ],
   "source": [
    "delta = mA - mB\n",
    "se = np.sqrt((mA*(1-mA)) / nA  +  (mB*(1-mB)) / nB)\n",
    "print(f'^delta = {delta:.4f}, ^se = {se:.4f}')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "With similar means and large samples, the Wald statistic will be small!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "W = 0.2005\n"
     ]
    }
   ],
   "source": [
    "W = (delta - 0) / se\n",
    "print(f\"W = {W:.4f}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now suppose we had very different means in the A/B conditions."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "^delta = 0.5000, ^se = 0.0430\n"
     ]
    }
   ],
   "source": [
    "mA = 0.7\n",
    "mB = 0.2\n",
    "nA = 199\n",
    "nB = 202\n",
    "delta = mA - mB\n",
    "se = np.sqrt((mA*(1-mA)) / nA  +  (mB*(1-mB)) / nB)\n",
    "print(f'^delta = {delta:.4f}, ^se = {se:.4f}')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "With very different means the Wald statistic is very large!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "W = 11.6331\n"
     ]
    }
   ],
   "source": [
    "W = (delta - 0) / se\n",
    "print(f\"W = {W:.4f}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "What if the means are still very different, but our sample size was very small?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "^delta = 0.5000, ^se = 0.2620\n",
      "W = 1.9081\n"
     ]
    }
   ],
   "source": [
    "mA = 0.7\n",
    "mB = 0.2\n",
    "nA = 5\n",
    "nB = 6\n",
    "delta = mA - mB\n",
    "se = np.sqrt((mA*(1-mA)) / nA  +  (mB*(1-mB)) / nB)\n",
    "print(f'^delta = {delta:.4f}, ^se = {se:.4f}')\n",
    "W = (delta - 0) / se\n",
    "print(f\"W = {W:.4f}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If the means are similar then the null hypothesis (that the means are the same) is quite likely to be true.  But if the means are very different then the null hypothesis is quite _unlikely_ to be true!\n",
    "\n",
    "On the other hand, if the means are different but the sample size is small, then it is quite possible that we got a fluke.  Thus, it is not so unlikely that the means would be extremely different in a small sample.\n",
    "\n",
    "The Wald statistic is therefore a measure of \"how extreme\" the difference in means is.  We will end up translating it to a probability that the evidence would be this extreme under the null hypothesis."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "de3bf05cd5ee4da39b2fc5b4860eeecd",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "interactive(children=(FloatSlider(value=0.6, description='mA', max=1.0, step=0.05), FloatSlider(value=0.3, desâ€¦"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "@interact(mA=(0, 1, 0.05), mB=(0, 1, 0.05), nA=(1, 100), nB=(1,100))\n",
    "def wald_statistic_interact(mA=0.6, mB=0.3, nA=10, nB=10):\n",
    "    delta = mA - mB\n",
    "    se = np.sqrt((mA*(1-mA)) / nA  +  (mB*(1-mB)) / nB)\n",
    "    print(f'^delta = {delta:.4f}, ^se = {se:.4f}')\n",
    "    W = (delta - 0) / se\n",
    "    print(f\"W = {W:.4f}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### $\\alpha$ is our confidence level\n",
    "\n",
    "Since the test statistic $W$ is a _random_ quantity based on random data (evidence from the experiment), we must acknowledge that there is some possibility our statistical test will come back with the wrong judgement.\n",
    "\n",
    "With our example, if you conducted the same exact experiment again, people may respond about whether they liked certain explanations differently.  The data could be so different that we cannot reject the null with the evidence from the second run of the experiment.\n",
    "\n",
    "With a statistical hypothesis test, there are 4 possible outcomes:\n",
    "\n",
    "| .          | Retain Null                    | Reject Null                   |\n",
    "|------------|--------------------------------|-------------------------------|\n",
    "| $H_0$ true |           âœ“                    | type I error (false positive) |\n",
    "| $H_1$ true | type II error (false negative) |           âœ“                   |\n",
    "\n",
    "The parameter $\\alpha$ lets us control what our desired level of type I error is.  The most common choice is $\\alpha = 0.05$, which means that you acknowledge that there is a 5% chance that your statistical hypothesis will make a type I error â€” that is, that you will reject the null hypothesis even when the null is true.\n",
    "\n",
    "You cannot know whether you made a type I or II error!  Over time you can become more and more confident, but you can never know for sure.\n",
    "\n",
    "When your $\\alpha$ is high:\n",
    "- the rejection region is large\n",
    "- meaning that a wider range of Wald statistics will fall within this rejection region\n",
    "- meaning you are more likely to reject the null hypothesis (**fewer** false negatives, type II errors)\n",
    "  - you will be less likely to incorrectly conclude that a significant thing is non-significant\n",
    "- but you will have **more** false positives (type I errors)\n",
    "  - you will be more likely to say that actually insignificant things are significant\n",
    "\n",
    "When your $\\alpha$ is low:\n",
    "- the rejection region is small\n",
    "- meaning that a small range of Wald statistics will fall within this rejection region\n",
    "- meaning you are **less** likely to reject the null hypothesis\n",
    "- there will be **fewer** false positives (type I errors)\n",
    "  - you will more correctly identify non-significant phenomena\n",
    "- but there will be **more** false negatives (type II errors)\n",
    "  - you will fail to identify some significant phenomena\n",
    "\n",
    "\n",
    "Many argue that it is time for the **arbitrary** convention of $\\alpha=0.05$ to be changed to something more restrictive, like $\\alpha=0.005$ (Benjamin et al, 2018) as a possible solution to the reproducibility crisis currently being faced by psychology and other social sciences (Open Science Collaboration, 2015).\n",
    "\n",
    "### $z_{\\alpha/2}$ is the critical value of the Wald statistic\n",
    "\n",
    "First, recall we have set $\\alpha = 0.05$ to be our statistical significance level (our acceptable type I error rate).\n",
    "\n",
    "Then, recall that we calculate the Wald statistic as follows:\n",
    "$W = \\frac{\\hat{\\theta} - \\theta_0}{\\hat{se}}$. \n",
    "\n",
    "The Wald statistic denotes \"how extreme\" the difference in means ($\\delta$) is.  We reject the null if it is more extreme than we would expect than by random.\n",
    "\n",
    "The most extreme values of the Wald statistic ($W$) will occur rarely â€” so they occur in the left and right tails of the Normal distribution. In the left tail if $W$ is negative and the right tail if $W$ is positive.\n",
    "\n",
    "Since we reject the null at the $\\alpha = 0.05$ level, then we want to make sure the rejection region covers 5% of all the possible outcomes.  So we put $\\alpha / 2$% of the rejection region in both the left and right tails of the Normal distribution.\n",
    "\n",
    "The starting point of of the rejection region is $z_{\\alpha/2}$, which is the x-axis of the Normal probability distribution!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1008x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(14, 4))\n",
    "plt.subplots_adjust(hspace=0.4)\n",
    "\n",
    "alpha = 0.315\n",
    "z = norm.ppf(1-(alpha/2))\n",
    "x_null = np.linspace(-2, z, 100)\n",
    "ax1.fill_between(x=x_null, y1=0, y2=norm.pdf(x_null))\n",
    "x_alt_left  = np.linspace(-4, -z, 100)\n",
    "x_alt_right = np.linspace(z, 4, 100)\n",
    "ax1.fill_between(x=x_alt_left,  y1=0, y2=norm.pdf(x_alt_left), color='tab:orange')\n",
    "ax1.fill_between(x=x_alt_right, y1=0, y2=norm.pdf(x_alt_right), color='tab:orange')\n",
    "ax1.set_title(f\"$\\\\alpha = {alpha}$, rejection area $|z| = {z:.2f}$ in orange\")\n",
    "ax1.set_xlim(x_alt_left.min(), x_alt_right.max())\n",
    "ax1.set_ylim(0);\n",
    "ax1.set_xlabel(\"z-score\")\n",
    "\n",
    "alpha = 0.05\n",
    "z = norm.ppf(1-(alpha/2))\n",
    "x_null = np.linspace(-2, z, 100)\n",
    "ax2.fill_between(x=x_null, y1=0, y2=norm.pdf(x_null))\n",
    "x_alt_left  = np.linspace(-4, -z, 100)\n",
    "x_alt_right = np.linspace(z, 4, 100)\n",
    "ax2.fill_between(x=x_alt_left,  y1=0, y2=norm.pdf(x_alt_left), color='tab:orange')\n",
    "ax2.fill_between(x=x_alt_right, y1=0, y2=norm.pdf(x_alt_right), color='tab:orange')\n",
    "ax2.set_title(f\"$\\\\alpha = {alpha}$, rejection area $|z| = {z:.2f}$ in orange\")\n",
    "ax2.set_xlim(x_alt_left.min(), x_alt_right.max())\n",
    "ax2.set_ylim(0);\n",
    "ax2.set_xlabel(\"z-score\");"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Interactive plot of the rejection region defined by $\\alpha$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "cd86c3cbc12a42b6b3d6e8db0544510d",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "interactive(children=(FloatSlider(value=0.05, description='alpha', max=1.0, min=0.01, step=0.01), Output()), _â€¦"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "@interact(alpha=(0.01, 1, 0.01))\n",
    "def alpha_rejection_region_interact(alpha=0.05):\n",
    "    fig, ax1 = plt.subplots()\n",
    "    z = norm.ppf(1-(alpha/2))\n",
    "    x_null = np.linspace(-z, z, 100)\n",
    "    ax1.fill_between(x=x_null, y1=0, y2=norm.pdf(x_null))\n",
    "    x_alt_left  = np.linspace(-4, -z, 100)\n",
    "    x_alt_right = np.linspace(z, 4, 100)\n",
    "    ax1.fill_between(x=x_alt_left,  y1=0, y2=norm.pdf(x_alt_left), color='tab:orange')\n",
    "    ax1.fill_between(x=x_alt_right, y1=0, y2=norm.pdf(x_alt_right), color='tab:orange')\n",
    "    ax1.set_title(f\"$\\\\alpha = {alpha}$, rejection area $|z| = {z:.2f}$ in orange\")\n",
    "    ax1.set_xlim(x_alt_left.min(), x_alt_right.max())\n",
    "    ax1.set_ylim(0);\n",
    "    ax1.set_xlabel(\"z-score\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "# just making sure we're using the data from the example\n",
    "delta = p_a - p_b\n",
    "se = np.sqrt((p_a*(1-p_a)) / N_A  +  (p_b*(1-p_b)) / N_B)\n",
    "W = (delta - 0) / se"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Using the Wald statistic to conduct the significance test\n",
    "\n",
    "Recall the significance test is that if $|W| > z_{\\alpha/2}$ then you can reject the null hypothesis.  \n",
    "\n",
    "By taking the absolute value of $|W|$, we can cover the case when $W$ is both negative and positive, checking both tails of the distribution at once.\n",
    "\n",
    "Our $z_{\\alpha/2}$ value is the critical statistic which defines the orange rejection regions as shown above.  If the Wald statistic exceeds this \"z-score\" then we reject.\n",
    "\n",
    "#### Wald confidence interval\n",
    "\n",
    "For the Wald test, if the null hypothesis test parameter falls _outside_ of the confidence interval formed by the test parameter and the standard error, then the null hypothesis can be rejected (Wasserman 2004; theorem 10.10)\n",
    "\n",
    "Recall the null hypothesis is that $\\hat{\\delta} = 0$: so if 0 is within this confidence interval, we cannot reject the null, but if 0 is not within this confidence interval we do reject the null.\n",
    "\n",
    "In this case as before, we see that 0 is not within this interval, so we reject the null and conclude the explanations are not statistically equal."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.04805571266617198, 0.5852776206671613)"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "C = (delta - se*z, delta + se*z)\n",
    "C"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Here's how the significance test works, with the comparison of the $W$ statistic to the $z$-score\n",
    "- the null hypothesis of equal proportions is rejected if the green $|W|$ line is within the orange rejection region, where $|W| > z_{\\alpha/2}$.\n",
    "\n",
    "The second graph shows the confidence interval approach\n",
    "- the null hypothesis of equal proportions is rejected if the confidence interval does not cross the 0 line."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1008x504 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(14, 7), gridspec_kw=dict(height_ratios=[2, 0.5]))\n",
    "plt.subplots_adjust(hspace=0.4)\n",
    "\n",
    "x_null = np.linspace(0, z, 100)\n",
    "ax1.fill_between(x=x_null, y1=0, y2=norm.pdf(x_null))\n",
    "x_alt_right = np.linspace(z, 4, 100)\n",
    "ax1.fill_between(x=x_alt_right, y1=0, y2=norm.pdf(x_alt_right), color='tab:orange')\n",
    "ax1.set_title(f\"Normal distribution, with area above $|z| = {z:.2f}$ in orange\")\n",
    "ax1.set_xlim(0, x_alt_right.max())\n",
    "ax1.set_ylim(0);\n",
    "ax1.axvline(abs(W), color='tab:green', linestyle='--', label=f\"|W| = {abs(W):.2f}\")\n",
    "ax1.set_xlabel(\"z-score\")\n",
    "ax1.legend();\n",
    "\n",
    "ax2.set_title(\"Test parameter ($\\delta$) with standard error confidence interval\")\n",
    "ax2.set_xlabel(\"value\")\n",
    "ax2.errorbar(x=delta, xerr=se*z, y=0, marker='o', markersize=10, capsize=5, linewidth=1)\n",
    "ax2.axvline(0, color='grey', linewidth=1)\n",
    "ax2.set_yticks([]);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Interactive Wald test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "654eefeb162b46cbad5cb9147e24ed83",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "interactive(children=(FloatSlider(value=0.5, description='p_a', max=1.0, min=0.01, step=0.01), FloatSlider(valâ€¦"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "@interact(p_a=(0.01, 1, 0.01), p_b=(0.01, 1, 0.01), N_A=(1, 100), N_B=(1, 100))\n",
    "def interactive_wald_test(p_a=0.5, p_b=0.4, N_A=10, N_B=10):\n",
    "    delta = p_a - p_b\n",
    "    se = np.sqrt((p_a*(1-p_a)) / N_A  +  (p_b*(1-p_b)) / N_B)\n",
    "    W = (delta - 0) / se\n",
    "\n",
    "    print(f'^delta = {delta:.4f}, ^se = {se:.4f}')\n",
    "    print(f\"W = {W:.4f}\")\n",
    "    \n",
    "    W = abs(W)\n",
    "\n",
    "    fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(14, 7), gridspec_kw=dict(height_ratios=[2, 0.5]))\n",
    "    plt.subplots_adjust(hspace=0.4)\n",
    "    \n",
    "    x2lim = max(4, W*1.01)\n",
    "\n",
    "    x_null = np.linspace(0, z, 100)\n",
    "    ax1.fill_between(x=x_null, y1=0, y2=norm.pdf(x_null))\n",
    "    x_alt_right = np.linspace(z, x2lim, 100)\n",
    "    ax1.fill_between(x=x_alt_right, y1=0, y2=norm.pdf(x_alt_right), color='tab:orange')\n",
    "    ax1.set_title(f\"Normal distribution, with area above $|z| = {z:.2f}$ in orange\")\n",
    "    ax1.set_xlim(0, x2lim)\n",
    "    ax1.set_ylim(0);\n",
    "    ax1.axvline(W, color='tab:green', linestyle='--', label=f\"|W| = {W:.2f}\")\n",
    "    ax1.set_xlabel(\"z-score\")\n",
    "    ax1.legend();\n",
    "\n",
    "    ax2.set_title(\"Test parameter ($\\delta$) with standard error confidence interval\")\n",
    "    ax2.set_xlabel(\"value\")\n",
    "    ax2.errorbar(x=delta, xerr=se*z, y=0, marker='o', markersize=10, capsize=5, linewidth=1)\n",
    "    ax2.axvline(0, color='grey', linewidth=1)\n",
    "    ax2.set_yticks([]);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# $p$-values\n",
    "\n",
    "(Wasserman 2004, Chapter 10.2)\n",
    "\n",
    "The hypothesis test so far has been just one simple comparison: accept or reject the null hypothesis? All this boils down to is, does the Wald statistic fall within the rejection region, or does it not?\n",
    "\n",
    "The rejection region was defined by our desired level of $\\alpha = 0.05$ which we chose ahead of time.  However, we can ask a different question.\n",
    "\n",
    "**What is the smallest $\\alpha$ at which we would reject the null hypothesis ($H_0$)?**\n",
    "\n",
    "$|W|$ is the smallest z-score where we can reject the null hypothesis!  This minimal rejection region is in green below: it is just the area of the Normal distribution's tails defined by $|W|$."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1008x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax1 = plt.subplots(1, 1, figsize=(14, 5))\n",
    "plt.subplots_adjust(hspace=0.4)\n",
    "\n",
    "xlim = max(4, W*1.01)\n",
    "critical_z = abs(W)\n",
    "x_null = np.linspace(-critical_z, critical_z, 100)\n",
    "ax1.fill_between(x=x_null, y1=0, y2=norm.pdf(x_null))\n",
    "x_rej_left = np.linspace(-xlim, -critical_z, 100)\n",
    "x_rej_right = np.linspace(critical_z, xlim, 100)\n",
    "ax1.fill_between(x=x_rej_left, y1=0, y2=norm.pdf(x_rej_left), color='limegreen')\n",
    "ax1.fill_between(x=x_rej_right, y1=0, y2=norm.pdf(x_rej_right), color='limegreen')\n",
    "ax1.set_title(f\"Normal distribution, with smallest rejection region above $|z| = {critical_z:.2f}$ in green\")\n",
    "ax1.set_xlim(-xlim, xlim)\n",
    "ax1.set_ylim(0);\n",
    "ax1.axvline(-abs(W), color='tab:green', linestyle='--', label=f\"-|W| = {-abs(W):.2f}\")\n",
    "ax1.axvline(abs(W), color='tab:green', linestyle='--', label=f\"+|W| = {abs(W):.2f}\")\n",
    "ax1.set_xlabel(\"z-score\")\n",
    "ax1.legend();"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### But what is the $p$-value?\n",
    "\n",
    "Definition of the $p$-value:\n",
    "\n",
    "> The $p$-value is the probability (under $H_0$) of observing a value of the test statistic the same as or more extreme than what was actually observed.\n",
    "\n",
    "(Wasserman 2004, p 158)\n",
    "\n",
    "Just like the area under the Normal distribution curve defines a probability, the area of the rejection region is the probability of observing a value that falls within the rejection region.  This is exactly how we compute our $p$-value!  So we need to compute the area of the green regions.\n",
    "\n",
    "For the two-tailed Wald test, $p\\text{-value} = 2 \\Phi(-|W|)$, where $\\Phi$ is the cumulative density function of the Normal distribution"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "p = 0.02085\n"
     ]
    }
   ],
   "source": [
    "tail_probability = norm.cdf(-W)\n",
    "p_value = 2*tail_probability\n",
    "print(f\"p = {p_value:.5f}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This means that there is about a 2% probability that, if the null hypothesis were true, that we would see a difference in means as extreme as the one we observed.\n",
    "\n",
    "Once we have computed the $p$-value, we don't have to care about the test statistic or the Wald statistic anymore.\n",
    "\n",
    "This is useful because there are all kinds of statistical tests in existence, and the $p$-value is single way to understand the value of any statistical test without worrying about each test's different test statistics and how they work.\n",
    "\n",
    "### $\\alpha$ is still our rejection region\n",
    "\n",
    "Before our rejection region was defined by the $z$-score and its comparison to the Wald statistic $|W|$.  Now, $\\alpha$ defines a region of $p$-values!  If the observed evidence produces a statistical test which generates a $p$-value that is less than $\\alpha$, we reject the null hypothesis (for our example, we conclude that the explanations are not equally effective)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "p = 0.02085, alpha = 0.05, p < 0.05?  True\n"
     ]
    }
   ],
   "source": [
    "print(f\"p = {p_value:.5f}, alpha = {alpha}, p < {alpha}? \", p_value < alpha)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div style=\"height:200px\"></div>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Appendix\n",
    "\n",
    "## Exploring Bernoulli distribution, deriving Binomial, assuming Normality\n",
    "\n",
    "Bernoulli data gives rise to a Binomial distribution\n",
    "\n",
    "By taking the difference in means we are creating a new Binomial distribution.\n",
    "\n",
    "With more and more data, the Binomial distribution approaches the shape of the Normal distribution."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "One Bernoulli trial â€” the explanation works with probability $p$, like flipping a biased coin."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def bernoulli(p):\n",
    "    if np.random.random() < p:\n",
    "        return 1\n",
    "    else:\n",
    "        return 0\n",
    "    \n",
    "bernoulli(p=0.5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "$n$ Bernoulli trials: we flip $n$ biased coins with probability $p$:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0, 1, 1, 1, 1, 0, 1, 0, 0, 1]"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "n = 10\n",
    "flips = [bernoulli(p=0.5) for coin_i in range(n)]\n",
    "flips"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Out of these coin flips, how many heads (1s) did we get?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "6"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "flips.count(1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "So what is the mean probability of heads in this sample?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.6"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "flips.count(1) / len(flips)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Run this experiment many times.  Each time flip $n$ coins and keep track of how many heads (1s) you get:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[3, 5, 4, 5]"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "flips_1 = [bernoulli(p=0.5) for coin_i in range(n)]\n",
    "flips_2 = [bernoulli(p=0.5) for coin_i in range(n)]\n",
    "flips_3 = [bernoulli(p=0.5) for coin_i in range(n)]\n",
    "flips_4 = [bernoulli(p=0.5) for coin_i in range(n)]\n",
    "\n",
    "num_heads = [flips_1.count(1), flips_2.count(1), flips_3.count(1), flips_4.count(1)]\n",
    "num_heads"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.title(\"Number of heads after flipping $n$ coins, 4 experiments\")\n",
    "plt.hist(num_heads, bins=10);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Lets automate the above, and run a bunch of trials:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "def flip_biasedcoins_countheads(n, p):\n",
    "    flips = [bernoulli(p=p) for coin_i in range(n)]\n",
    "    return flips.count(1)\n",
    "\n",
    "num_flip_experiments = 100\n",
    "num_heads = [flip_biasedcoins_countheads(n=10, p=0.5) for _ in range(num_flip_experiments)]\n",
    "plt.title(f\"Number of heads after flipping $n$ coins, {len(num_heads)} experiments\")\n",
    "plt.hist(num_heads);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Lets run even more to get a better idea of what would happen in the infinite data (theoretical) case:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "num_flip_experiments = 10000\n",
    "num_heads_alot = [flip_biasedcoins_countheads(n=10, p=0.5) for _ in range(num_flip_experiments)]\n",
    "plt.title(f\"Number of heads after flipping $n$ coins, {len(num_heads_alot)} experiments\")\n",
    "plt.hist(num_heads_alot);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We just derived the Binomial distribution!  It is just how many times we would get heads if we flipped $n$ biased coins with probability $p$.\n",
    "\n",
    "Alternatively, it models the number of students who like an explanation if the explanation has a probability $p$ of being good, and we asked $n$ students.\n",
    "\n",
    "But the Wald test isn't using the count of students who liked the explanation, it is using the proportion of students who liked it. Is the binomial mean also binomially distributed?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "from decimal import Decimal\n",
    "from collections import Counter"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "def random_binomial_mean(n, p):\n",
    "    count_heads = flip_biasedcoins_countheads(n=n, p=p)\n",
    "    return Decimal(count_heads) / n\n",
    "\n",
    "num_flip_experiments = 100000\n",
    "means_many = [random_binomial_mean(n=10, p=0.5) for _ in range(num_flip_experiments)]\n",
    "h = Counter(means_many)\n",
    "\n",
    "fig, ax = plt.subplots(figsize=(12, 4))\n",
    "xs = sorted(h.keys())\n",
    "b = [h[_x] for _x in xs]\n",
    "ax.set_title(\"Distribution of means from Binomially distributed data\")\n",
    "ax.bar(x=np.arange(len(xs)), height=b)\n",
    "ax.set_xticks(np.arange(len(xs)))\n",
    "ax.set_xticklabels(labels=map(str, xs));"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "And our Wald test isn't just means, it is a difference in means. What about that?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "def random_difference_binomial_means(n, p):\n",
    "    exp1_count_heads = flip_biasedcoins_countheads(n=n, p=p)\n",
    "    m1 = Decimal(exp1_count_heads) / n\n",
    "    exp2_count_heads = flip_biasedcoins_countheads(n=n, p=p)\n",
    "    m2 = Decimal(exp2_count_heads) / n\n",
    "    return m1-m2\n",
    "\n",
    "\n",
    "num_flip_experiments = 100000\n",
    "means_many = [random_difference_binomial_means(n=10, p=0.5) for _ in range(num_flip_experiments)]\n",
    "h = Counter(means_many)\n",
    "\n",
    "fig, ax = plt.subplots(figsize=(12, 4))\n",
    "xs = sorted(h.keys())\n",
    "b = [h[_x] for _x in xs]\n",
    "ax.set_title(\"Distribution of differences of means from Binomially distributed data\")\n",
    "ax.bar(x=np.arange(len(xs)), height=b)\n",
    "ax.set_xticks(np.arange(len(xs)))\n",
    "ax.set_xticklabels(labels=map(str, xs));"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For binomial distributed data, as $n$ i.e. the number of coin flips (or students seeing explanations) approaches infinity, we get an approximately Normal distribution."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1152x288 with 4 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, axes = plt.subplots(1, 4, figsize=(16, 4))\n",
    "ntrials = [6, 20, 100]\n",
    "\n",
    "for n, ax in zip(ntrials, axes.flatten()[:-1]):\n",
    "    x = np.arange(0, n+1)\n",
    "    ax.set_title(f\"Binomial: $p=0.5$ and $n={n}$\")\n",
    "    ax.bar(x=x, height=stats.binom.pmf(x, p=0.5, n=n))\n",
    "    \n",
    "ax = axes[-1]\n",
    "x = np.arange(400, 600)\n",
    "ax.fill_between(x=x, y1=0, y2=stats.binom.pmf(x, p=0.5, n=1000))\n",
    "ax.set_ylim(0, 0.028)\n",
    "ax.set_title(\"Binomial: $p=0.5$ and $n=1000$\");"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
